*The setup:*

AWS Infrastructure Setup in Terraform:
There is 4 folders: 
1. Terraform:
   - ".gitignore" - includes all parts that need to be ignored (authentication and keys).
   - "terraform.lock.hcl" - a file maintained automatically by "terraform init".
   - "compute.tf" - contains all the settings for creating computing tools (EC2 with security group, IGW, NAT, ALB with security group and target group).
   - "creds.tf" - contains all the secret items (variables as keys).
   - "main.tf" - includes all the basic configurations required to build other resources (AWS as a provider, the chosen region to work in, and the key pair to build EC2).
   - "network.tf" - defines a VPC featuring subnets (2 private, 2 public), EIP for NAT, route table for each compute resource additionally, and security groups for each resource.
2. Minikube:
   - "nginx-deploy.yml" - contains all the definitions to build an Nginx app on port 80.
3. Container:
   - "Dockerfile" - uploads the latest version of Nginx with specific output.
   - "nginx.conf" - includes all the required configuration for the Nginx app.
4. '/terraform' - includes all the required configurations for Terraform, created automatically.

*Deployment:*
1. Network - All the resoure in the same Region and VPC. 
             Egress  - The EC2 server is in a private subnet, and its route table routes to the NAT (its security group is configured for the SSH protocol on port 22).
                       The NAT is inside the public subnet, and its route table routes to the IGW, which connects to the external network. 
             Ingress - The IGW connects to an Elastic Load Balancer (ELB) that balances between the two public subnets and the resources within them.
                       The route table connects to the EC2 instance and isolates it from the external network (its security group is configured for the HTTP protocol on port 80).     
2. Instance - EC2 Machine::  Linux Amazon mechine, t3.micro(free). 
            - Inside the EC2: The Node of MiniKube that deploy a Nginx Docker container.
            - Files: YAML file for the Docker Nginx app node. 
                     DokerFile with the latest version of Nginx and open poet 80.
3. DNS - Configure a DNS name for the application - Google Public DNS- a free resoure.
         
*Process:*
1. Executing the Terraform code:
- Divide files to 4 folder(as expanded above).
- Create the workflow and write the code in the following sequence.. 
- Deploy the Terraform code using the following commands:
'terraform init'
'terraform fmt'
'terraform validate'
'terraform plan'
'terraform apply'

2.Docker Containerization:
Dockerize NGINX to respond the text "yo this is nginx":

A: First, execute all on my local machine.

- Download Docker Desktop.
- Run Docker Desktop on the local machine - Windows OS.
- Create Nginx configuration.
- Create Dockerfile.
- Build Docker Image on top of the Dockerfile: docker build -t my-nginx .
- Run the new Image on port 80: docker run -p 8080:80 my-nginx
- Open the browser at the new address: http://localhost:8080
- Synchronize the changes on GitHub.

B. Second, execute all on the AWS infrastructure:
- Download Docker.
- Start the Docker daemon: systemctl
- Add the Dockerfile and the Nginx.conf.
- Build Docker Image on top of the Dockerfile.
- Run the new Image on port 80: docker run -p 8080:80 my-nginx
- Open the browser at the new address: http:/ALB-IP:8080

3. Kubernetes Deployment:
- Install Minikube cluster and start it "minikube start" (create a VM).
-  NGINX Docker image - Navigate the DokerFile to the same directory and run the Image. 
- Deploy NGINX to Minikube - Create YAML configuration file.
- Apply the deployment to your Minikube cluster "kubectl apply -f nginx-deployment.yaml"
-  Expose NGINX Service " kubectl expose deployment nginx-deployment --type=NodePort --port=80 "
- Get Minikube IP and Port - "minikube ip", "kubectl get services". 
- Access NGINX in the web browser  or "curl http://<minikube-ip>:<nodeport>"

4. Public Access:
- Choose a unique Domain Name
- Register the 'Google Domain'.
- Configure DNS Records: Address Record - domain map to an IPv4 address (with the domain registrar's control panel ).
- Point the DNS to the Server(IP address) - the ALB Nginx. 
- Configure Web Server - updating the Nginx configuration file (nginx.conf). 
- SSL/TLS Configuration certificate the domain - to secure the Nginx application with HTTPS.





